// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth.js схема для аутентификации
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Хешированный пароль для обычной авторизации
  
  // Роль пользователя
  role          String    @default("user") // "user" или "admin"
  
  // Premium настройки
  isPremium     Boolean   @default(false)
  premiumExpiry DateTime?
  
  // Лимиты
  lastReadingAt DateTime?
  readingsCount Int       @default(0)
  
  // Отношения
  accounts      Account[]
  sessions      Session[]
  readings      TarotReading[]
  messages      ChatMessage[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Модели для Таро приложения
model TarotReading {
  id          String   @id @default(cuid())
  userId      String
  spreadType  String
  question    String?
  category    String
  cards       Json     // Массив карт с позициями
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tarot_readings")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  readingId String
  content   String   @db.Text
  isUser    Boolean  @default(true)
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reading   TarotReading @relation(fields: [readingId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@map("chat_messages")
}

model RateLimit {
  id         String   @id @default(cuid())
  userId     String
  readingId  String?
  type       String   // "reading" или "message"
  lastAction DateTime @default(now())
  count      Int      @default(1)
  
  @@unique([userId, readingId, type])
  @@map("rate_limits")
}
