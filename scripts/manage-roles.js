const { PrismaClient } = require("../src/generated/prisma");

const prisma = new PrismaClient();

async function manageRoles() {
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    switch (command) {
      case "list":
        await listUsers();
        break;
      case "admin":
        const email = args[1];
        if (!email) {
          console.log(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ email: node scripts/manage-roles.js admin user@example.com"
          );
          return;
        }
        await makeAdmin(email);
        break;
      case "user":
        const userEmail = args[1];
        if (!userEmail) {
          console.log(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ email: node scripts/manage-roles.js user admin@example.com"
          );
          return;
        }
        await makeUser(userEmail);
        break;
      case "premium":
        const premiumEmail = args[1];
        const days = args[2] || 365;
        if (!premiumEmail) {
          console.log(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ email: node scripts/manage-roles.js premium user@example.com [–¥–Ω–∏]"
          );
          return;
        }
        await makePremium(premiumEmail, parseInt(days));
        break;
      case "remove-premium":
        const noPremiumEmail = args[1];
        if (!noPremiumEmail) {
          console.log(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ email: node scripts/manage-roles.js remove-premium user@example.com"
          );
          return;
        }
        await removePremium(noPremiumEmail);
        break;
      default:
        showHelp();
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  } finally {
    await prisma.$disconnect();
  }
}

async function listUsers() {
  console.log("üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n");

  const users = await prisma.user.findMany({
    select: {
      id: true,
      email: true,
      name: true,
      role: true,
      isPremium: true,
      premiumExpiry: true,
      createdAt: true,
      _count: {
        select: {
          readings: true,
        },
      },
    },
    orderBy: { createdAt: "desc" },
  });

  if (users.length === 0) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    return;
  }

  users.forEach((user, index) => {
    const role = user.role === "admin" ? "üëë –ê–¥–º–∏–Ω" : "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    const premium = user.isPremium ? "‚ú® Premium" : "üÜì –û–±—ã—á–Ω—ã–π";
    const expiry = user.premiumExpiry
      ? ` (–¥–æ ${new Date(user.premiumExpiry).toLocaleDateString()})`
      : "";
    const readings = user._count.readings;

    console.log(`${index + 1}. ${user.name || "–ë–µ–∑ –∏–º–µ–Ω–∏"}`);
    console.log(`   üìß Email: ${user.email}`);
    console.log(`   üè∑Ô∏è  –†–æ–ª—å: ${role}`);
    console.log(`   üíé –°—Ç–∞—Ç—É—Å: ${premium}${expiry}`);
    console.log(`   üìö –†–∞—Å–∫–ª–∞–¥–æ–≤: ${readings}`);
    console.log(
      `   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.createdAt).toLocaleDateString()}`
    );
    console.log();
  });
}

async function makeAdmin(email) {
  const user = await prisma.user.findUnique({
    where: { email },
  });

  if (!user) {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  if (user.role === "admin") {
    console.log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
    return;
  }

  await prisma.user.update({
    where: { email },
    data: { role: "admin" },
  });

  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} (${user.name}) —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!`);
}

async function makeUser(email) {
  const user = await prisma.user.findUnique({
    where: { email },
  });

  if (!user) {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  if (user.role === "user") {
    console.log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —É–∂–µ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`);
    return;
  }

  await prisma.user.update({
    where: { email },
    data: { role: "user" },
  });

  console.log(
    `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} (${user.name}) —Ç–µ–ø–µ—Ä—å –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`
  );
}

async function makePremium(email, days) {
  const user = await prisma.user.findUnique({
    where: { email },
  });

  if (!user) {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  const premiumExpiry = new Date();
  premiumExpiry.setDate(premiumExpiry.getDate() + days);

  await prisma.user.update({
    where: { email },
    data: {
      isPremium: true,
      premiumExpiry: premiumExpiry,
    },
  });

  console.log(
    `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} (${user.name}) –ø–æ–ª—É—á–∏–ª Premium –Ω–∞ ${days} –¥–Ω–µ–π`
  );
  console.log(`üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${premiumExpiry.toLocaleDateString()}`);
}

async function removePremium(email) {
  const user = await prisma.user.findUnique({
    where: { email },
  });

  if (!user) {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }

  await prisma.user.update({
    where: { email },
    data: {
      isPremium: false,
      premiumExpiry: null,
    },
  });

  console.log(
    `‚úÖ Premium —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${email} (${user.name})`
  );
}

function showHelp() {
  console.log(`
üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node scripts/manage-roles.js <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–æ–º–∞–Ω–¥—ã:
  list                              - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  admin <email>                     - –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
  user <email>                      - –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∞ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  premium <email> [–¥–Ω–∏]             - –í—ã–¥–∞—Ç—å Premium (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 365 –¥–Ω–µ–π)
  remove-premium <email>            - –£–±—Ä–∞—Ç—å Premium —Å—Ç–∞—Ç—É—Å

–ü—Ä–∏–º–µ—Ä—ã:
  node scripts/manage-roles.js list
  node scripts/manage-roles.js admin user@example.com
  node scripts/manage-roles.js premium user@example.com 30
  node scripts/manage-roles.js user admin@example.com
  node scripts/manage-roles.js remove-premium user@example.com
`);
}

manageRoles();
