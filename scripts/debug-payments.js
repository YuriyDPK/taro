const { PrismaClient } = require("../src/generated/prisma");

const prisma = new PrismaClient();

async function debugPayments() {
  try {
    console.log("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π...\n");

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
    const allPayments = await prisma.payment.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true,
            isPremium: true,
            premiumExpiry: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
      take: 10,
    });

    console.log(`üí≥ –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${allPayments.length}\n`);

    allPayments.forEach((payment, index) => {
      console.log(`${index + 1}. –ü–ª–∞—Ç–µ–∂ ID: ${payment.id.slice(-8)}...`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${payment.user.email}`);
      console.log(`   –°—É–º–º–∞: ${payment.amount} ‚ÇΩ`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${payment.status}`);
      console.log(`   –¢–∏–ø: ${payment.subscriptionType}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${payment.createdAt.toLocaleString("ru-RU")}`);
      console.log(
        `   –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${
          payment.user.isPremium ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç"
        }`
      );
      if (payment.user.premiumExpiry) {
        console.log(
          `   –ü—Ä–µ–º–∏—É–º –¥–æ: ${payment.user.premiumExpiry.toLocaleString("ru-RU")}`
        );
      }
      console.log("");
    });

    // 2. –ù–∞—Ö–æ–¥–∏–º —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
    const successfulPaymentsWithoutPremium = await prisma.payment.findMany({
      where: {
        status: "succeeded",
        user: {
          isPremium: false,
        },
      },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            name: true,
            isPremium: true,
            premiumExpiry: true,
          },
        },
      },
    });

    if (successfulPaymentsWithoutPremium.length > 0) {
      console.log("üö® –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò:");
      console.log(
        `   –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞: ${successfulPaymentsWithoutPremium.length}\n`
      );

      successfulPaymentsWithoutPremium.forEach((payment, index) => {
        console.log(
          `   ${index + 1}. ${payment.id.slice(-8)}... | ${
            payment.user.email
          } | ${payment.amount}‚ÇΩ`
        );
      });
      console.log("");
    } else {
      console.log("‚úÖ –í—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–º–µ—é—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–º–∏—É–º\n");
    }

    // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = await prisma.payment.groupBy({
      by: ["status"],
      _count: {
        status: true,
      },
    });

    console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø–ª–∞—Ç–µ–∂–µ–π:");
    statusStats.forEach((stat) => {
      console.log(`   ${stat.status}: ${stat._count.status}`);
    });
    console.log("");

    // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const premiumUsers = await prisma.user.count({
      where: { isPremium: true },
    });

    const totalUsers = await prisma.user.count();

    console.log("üëë –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:");
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
    console.log(`   –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${premiumUsers}`);
    console.log(
      `   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–º–∏—É–º: ${((premiumUsers / totalUsers) * 100).toFixed(1)}%\n`
    );

    // 5. –ë–ª–∏–∂–∞–π—à–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º–∞
    const upcomingExpirations = await prisma.user.findMany({
      where: {
        isPremium: true,
        premiumExpiry: {
          lte: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π
        },
      },
      select: {
        id: true,
        email: true,
        name: true,
        premiumExpiry: true,
      },
      orderBy: {
        premiumExpiry: "asc",
      },
    });

    if (upcomingExpirations.length > 0) {
      console.log("‚ö†Ô∏è –°–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç –ø—Ä–µ–º–∏—É–º:");
      upcomingExpirations.forEach((user) => {
        const daysLeft = Math.ceil(
          (user.premiumExpiry - new Date()) / (1000 * 60 * 60 * 24)
        );
        console.log(
          `   ${
            user.email
          } - —á–µ—Ä–µ–∑ ${daysLeft} –¥–Ω–µ–π (${user.premiumExpiry.toLocaleDateString(
            "ru-RU"
          )})`
        );
      });
      console.log("");
    } else {
      console.log(
        "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º –ø—Ä–µ–º–∏—É–º–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π\n"
      );
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
async function fixPayments() {
  try {
    console.log("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...\n");

    const problemPayments = await prisma.payment.findMany({
      where: {
        status: "succeeded",
        user: {
          isPremium: false,
        },
      },
      include: {
        user: true,
      },
    });

    if (problemPayments.length === 0) {
      console.log("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      return;
    }

    console.log(
      `–ù–∞–π–¥–µ–Ω–æ ${problemPayments.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ê–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–µ–º–∏—É–º...`
    );

    for (const payment of problemPayments) {
      const now = new Date();
      const premiumExpiry = new Date(now);

      if (payment.subscriptionType === "monthly") {
        premiumExpiry.setMonth(premiumExpiry.getMonth() + 1);
      } else if (payment.subscriptionType === "yearly") {
        premiumExpiry.setFullYear(premiumExpiry.getFullYear() + 1);
      }

      await prisma.user.update({
        where: { id: payment.userId },
        data: {
          isPremium: true,
          premiumExpiry: premiumExpiry,
        },
      });

      console.log(
        `‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º –¥–ª—è ${
          payment.user.email
        } –¥–æ ${premiumExpiry.toLocaleDateString("ru-RU")}`
      );
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

if (command === "fix") {
  fixPayments();
} else {
  debugPayments();
}
