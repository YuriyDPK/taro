import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { getTarotReadingStream } from "@/shared/api/gpt";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
function generateReadingContext(reading: any): string {
  const cards = Array.isArray(reading.cards) ? reading.cards : [];

  let context = `üîÆ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ "${reading.spreadType}"\n`;

  if (reading.question) {
    context += `‚ùì –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: ${reading.question}\n`;
  }

  context += `üìÖ –î–∞—Ç–∞ —Ä–∞—Å–∫–ª–∞–¥–∞: ${reading.createdAt.toLocaleDateString(
    "ru-RU"
  )}\n\n`;

  if (cards.length > 0) {
    context += "üÉè –ö–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ:\n";
    cards.forEach((card: any, index: number) => {
      context += `\n${index + 1}. ${card.name}`;
      if (card.description) {
        context += ` (–ü–æ–∑–∏—Ü–∏—è: ${card.description})`;
      }

      if (card.meaning) {
        const meaning = card.isReversed
          ? card.meaning.reversed
          : card.meaning.upright;
        context += `\n   –ó–Ω–∞—á–µ–Ω–∏–µ: ${meaning}`;
      }

      if (card.isReversed) {
        context += "\n   –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞";
      }
    });
    context += "\n";
  }

  context +=
    "\n‚ú® –£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–∞–≤–∞–π —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã–ø–∞–≤—à–∏—Ö –∫–∞—Ä—Ç –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π.\n\n";

  return context;
}

// POST - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 });
    }

    const { readingId, content } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å–∫–ª–∞–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const reading = await prisma.tarotReading.findFirst({
      where: {
        id: readingId,
        userId: session.user.id,
      },
    });

    if (!reading) {
      return NextResponse.json({ error: "–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!session.user.isPremium) {
      const lastMessage = await prisma.chatMessage.findFirst({
        where: {
          readingId,
          userId: session.user.id,
          isUser: true,
        },
        orderBy: { createdAt: "desc" },
      });

      if (lastMessage) {
        const timeSinceLastMessage =
          Date.now() - lastMessage.createdAt.getTime();
        const fiveMinutes = 5 * 60 * 1000;

        if (timeSinceLastMessage < fiveMinutes) {
          return NextResponse.json(
            {
              error: "–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–µ–Ω",
              timeLeft: fiveMinutes - timeSinceLastMessage,
            },
            { status: 429 }
          );
        }
      }
    }
    // Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = await prisma.chatMessage.create({
      data: {
        userId: session.user.id,
        readingId,
        content,
        isUser: true,
      },
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è GPT
    const readingContext = generateReadingContext(reading);
    const fullMessage = `${readingContext}–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${content}`;

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å–∫–ª–∞–¥–∞
    let gptResponse = "";

    try {
      await new Promise<void>((resolve, reject) => {
        getTarotReadingStream(fullMessage, (chunk: string) => {
          gptResponse += chunk;
        })
          .then(() => resolve())
          .catch(reject);
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ GPT:", error);
      gptResponse = "üåô –ü—Ä–æ—Å—Ç–∏—Ç–µ, —ç–Ω–µ—Ä–≥–∏—è –Ω–∞—Ä—É—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...";
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≥–∞–¥–∞–ª–∫–∏
    const gptMessage = await prisma.chatMessage.create({
      data: {
        userId: session.user.id,
        readingId,
        content: gptResponse,
        isUser: false,
      },
    });

    return NextResponse.json({
      userMessage,
      gptMessage,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
