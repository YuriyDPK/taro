import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { getTarotReadingStream } from "@/shared/api/gpt";

// POST - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 });
    }

    const { readingId, content } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å–∫–ª–∞–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const reading = await prisma.tarotReading.findFirst({
      where: {
        id: readingId,
        userId: session.user.id,
      },
    });

    if (!reading) {
      return NextResponse.json({ error: "–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!session.user.isPremium) {
      const lastMessage = await prisma.chatMessage.findFirst({
        where: {
          readingId,
          userId: session.user.id,
          isUser: true,
        },
        orderBy: { createdAt: "desc" },
      });

      if (lastMessage) {
        const timeSinceLastMessage =
          Date.now() - lastMessage.createdAt.getTime();
        const fiveMinutes = 5 * 60 * 1000;

        if (timeSinceLastMessage < fiveMinutes) {
          return NextResponse.json(
            {
              error: "–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–µ–Ω",
              timeLeft: fiveMinutes - timeSinceLastMessage,
            },
            { status: 429 }
          );
        }
      }
    }
    // Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = await prisma.chatMessage.create({
      data: {
        userId: session.user.id,
        readingId,
        content,
        isUser: true,
      },
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
    let gptResponse = "";

    try {
      await new Promise<void>((resolve, reject) => {
        getTarotReadingStream(content, (chunk: string) => {
          gptResponse += chunk;
        })
          .then(() => resolve())
          .catch(reject);
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ GPT:", error);
      gptResponse = "üåô –ü—Ä–æ—Å—Ç–∏—Ç–µ, —ç–Ω–µ—Ä–≥–∏—è –Ω–∞—Ä—É—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...";
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≥–∞–¥–∞–ª–∫–∏
    const gptMessage = await prisma.chatMessage.create({
      data: {
        userId: session.user.id,
        readingId,
        content: gptResponse,
        isUser: false,
      },
    });

    return NextResponse.json({
      userMessage,
      gptMessage,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}
