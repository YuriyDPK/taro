import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (!session?.user?.email || session.user.role !== "admin") {
      return NextResponse.json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" }, { status: 403 });
    }

    const { paymentId } = await request.json();

    if (!paymentId) {
      return NextResponse.json(
        { error: "–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–ª–∞—Ç–µ–∂–∞" },
        { status: 400 }
      );
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂
    const payment = await prisma.payment.findUnique({
      where: { id: paymentId },
      include: { user: true },
    });

    if (!payment) {
      return NextResponse.json({ error: "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
    }

    if (payment.status !== "succeeded") {
      return NextResponse.json(
        { error: "–ü–ª–∞—Ç–µ–∂ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ succeeded" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø—Ä–µ–º–∏—É–º
    if (payment.user.isPremium) {
      return NextResponse.json(
        { message: "–ü—Ä–µ–º–∏—É–º —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" },
        { status: 200 }
      );
    }

    const now = new Date();
    const premiumExpiry = new Date(now);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if (payment.subscriptionType === "monthly") {
      premiumExpiry.setMonth(premiumExpiry.getMonth() + 1);
    } else if (payment.subscriptionType === "yearly") {
      premiumExpiry.setFullYear(premiumExpiry.getFullYear() + 1);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await prisma.user.update({
      where: { id: payment.userId },
      data: {
        isPremium: true,
        premiumExpiry: premiumExpiry,
      },
    });

    console.log(
      `üîß –ê–¥–º–∏–Ω ${session.user.email} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${payment.userId} –¥–æ ${premiumExpiry}`
    );

    return NextResponse.json({
      message: "–ü—Ä–µ–º–∏—É–º —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
      user: {
        id: updatedUser.id,
        email: updatedUser.email,
        isPremium: updatedUser.isPremium,
        premiumExpiry: updatedUser.premiumExpiry,
      },
      payment: {
        id: payment.id,
        subscriptionType: payment.subscriptionType,
        amount: payment.amount,
      },
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ –∞–¥–º–∏–Ω–æ–º:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}
